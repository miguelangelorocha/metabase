version: 2.1

########################################################################################################################
#                                                      EXECUTORS                                                       #
########################################################################################################################

executors:
  basic:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: alpine/git

  clojure:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1

  node:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      # - image: circleci/node:7-browsers
      - image: circleci/clojure:lein-2.8.1-node-browsers

  clojure-and-node:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1-node-browsers

  build:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: metabase/ci-build:latest

  java-11:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:openjdk-11-lein-2.8.1

  postgres-9-6:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1
        environment:
          MB_DB_TYPE: postgres
          MB_DB_PORT: 5432
          MB_DB_HOST: localhost
          MB_DB_DBNAME: circle_test
          MB_DB_USER: circle_test
          MB_POSTGRESQL_TEST_USER: circle_test
      - image: circleci/postgres:9.6-alpine
        environment:
          POSTGRES_USER: circle_test
          POSTGRES_DB: circle_test

  mysql-5-7:
    parameters:
      # for testing the use of an at-rest encryption key. Optional.
      encryption-key:
        type: string
        default: ""
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1
        environment:
          MB_DB_TYPE: mysql
          MB_DB_HOST: localhost
          MB_DB_PORT: 3306
          MB_DB_DBNAME: circle_test
          MB_DB_USER: root
          MB_MYSQL_TEST_USER: root
          MB_ENCRYPTION_SECRET_KEY: << parameters.encryption-key >>
      - image: circleci/mysql:5.7.23

  mongo:
     working_directory: /home/circleci/metabase/metabase/
     docker:
       - image: circleci/clojure:lein-2.8.1
       - image: circleci/mongo:3.4

  presto:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1
        environment:
          MB_PRESTO_TEST_HOST: localhost
          MB_PRESTO_TEST_PORT: 8080
      - image: metabase/presto-mb-ci
        environment:
          JAVA_TOOL_OPTIONS: "-Xmx2g"

  sparksql:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1
      - image: metabase/spark:2.1.1

  vertica:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1
      - image: sumitchawla/vertica

  sqlserver:
    working_directory: /home/circleci/metabase/metabase/
    docker:
      - image: circleci/clojure:lein-2.8.1
        environment:
          MB_SQLSERVER_TEST_HOST: localhost
          MB_SQLSERVER_TEST_PASSWORD: 'P@ssw0rd'
          MB_SQLSERVER_TEST_USER: SA
      - image: mcr.microsoft.com/mssql/server:2017-latest
        environment:
          ACCEPT_EULA: Y
          SA_PASSWORD: 'P@ssw0rd'



########################################################################################################################
#                                                       COMMANDS                                                       #
########################################################################################################################

commands:
  attach-workspace:
    steps:
      - attach_workspace:
          at: /home/circleci/

  restore-be-deps-cache:
    steps:
      - restore_cache:
          keys:
            - be-deps-{{ checksum "project.clj" }}
            - be-deps-

  restore-fe-deps-cache:
    steps:
      - restore_cache:
          keys:
            - fe-deps-{{ checksum "yarn.lock" }}
            - fe-deps-

  run-yarn-command:
    parameters:
      command-name:
        type: string
      command:
        type: string
      before-steps:
        type: steps
        default: []
    steps:
      - attach-workspace
      - restore-fe-deps-cache
      - steps: << parameters.before-steps >>
      - run:
          name: << parameters.command-name >>
          command: yarn << parameters.command >>
          no_output_timeout: 5m


jobs:

########################################################################################################################
#                                                    CHECKOUT ETC.                                                     #
########################################################################################################################

  checkout:
    executor: basic
    steps:
      - restore_cache:
          keys:
            - source-{{ .Branch }}-{{ .Revision }}
            - source-{{ .Branch }}
            - source-
      - checkout
      - save_cache:
          key: source-{{ .Branch }}-{{ .Revision }}
          paths:
            - .git
      # The basic idea here is to generate a file with checksums for all the backend source files, and save it as
      # `./backend-checksums.txt`. Then we'll use the checksum of that files for uberjar caching; thus we can reuse
      # the same uberjar for integration tests across any build where the backend files are the same
      - run:
          name: Generate checksums of all backend source files to use as Uberjar cache key
          command: >
            for file in `find ./src -type f -name '*.clj' | sort`;
              do echo `md5sum $file` >> backend-checksums.txt;
            done;
            echo `md5sum project.clj` >> backend-checksums.txt
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - metabase/metabase

  yaml-linter:
    executor: node
    steps:
      - attach-workspace
      - run:
          name: Install yamllint
          command: npm install yaml-lint
          no_output_timeout: 2m
      - run:
          name: Lint YAML files
          command: ./node_modules/.bin/yamllint `find resources -name '*.yaml'`
          no_output_timeout: 2m

  verify-i18n-files:
    executor: node
    steps:
      - attach-workspace
      - restore-fe-deps-cache
      - run:
          name: Update apt
          command: sudo apt-get update
      - run:
          name: Install gettext
          command: sudo apt-get install gettext
      - run:
          name: Verify i18n .po files
          command: ./bin/i18n/build-translation-resources
          no_output_timeout: 2m


########################################################################################################################
#                                                       BACKEND                                                        #
########################################################################################################################

  be-deps:
    executor: clojure
    steps:
      - attach-workspace
      - restore-be-deps-cache
      - run: lein with-profile +include-all-drivers deps
      - save_cache:
          key: be-deps-{{ checksum "project.clj" }}
          paths:
            - /home/circleci/.m2

  lein:
    parameters:
      e:
        type: executor
        default: clojure
      lein-command:
        type: string
    executor: << parameters.e >>
    steps:
      - attach-workspace
      - restore-be-deps-cache
      - run:
          command: lein with-profile +ci << parameters.lein-command >>
          no_output_timeout: 5m

  be-linter-reflection-warnings:
    executor: clojure
    steps:
      - attach-workspace
      - restore-be-deps-cache
      - run:
          name: Run reflection warnings checker
          command: ./bin/reflection-linter
          no_output_timeout: 5m

  

  test-migrate-from-h2:
    parameters:
      e:
        type: executor
      db-type:
        type: string
    executor: << parameters.e >>
    steps:
      - attach-workspace
      - restore-be-deps-cache
      - run:
          name: Test migrating from H2 -> << parameters.db-type >> -> H2
          environment:
            MB_DB_TYPE: << parameters.db-type >>
            MB_DB_HOST: localhost
          command: >
            ./bin/test-load-and-dump.sh
          no_output_timeout: 5m


########################################################################################################################
#                                                       FRONTEND                                                       #
########################################################################################################################

  fe-deps:
    executor: node
    steps:
      - attach-workspace
      - restore-fe-deps-cache
      - run:
          name: Run yarn if yarn.lock checksum has changed
          command: >
            if [ ! -f yarn.lock.checksum ] || [ "$(md5sum yarn.lock)" != "$(cat yarn.lock.checksum)" ];
              then SAUCE_CONNECT_DOWNLOAD_ON_INSTALL=true yarn;
            fi
          no_output_timeout: 5m
      - run:
          name: Save yarn checksum
          command: md5sum yarn.lock > yarn.lock.checksum
      - save_cache:
          key: fe-deps-{{ checksum "yarn.lock" }}
          paths:
            - /home/circleci/.yarn
            - /home/circleci/.yarn-cache
            - /home/circleci/metabase/metabase/node_modules
            - /home/circleci/yarn.lock.checksum

  build-uberjar:
    executor: clojure-and-node
    steps:
      - attach-workspace
      - restore-be-deps-cache
      - restore_cache:
          keys:
            - uberjar-{{ checksum "./backend-checksums.txt" }}
      - run:
          name: Build uberjar if needed
          command: >
            if [ ! -f './target/uberjar/metabase.jar' ];
              then ./bin/build version uberjar;
            fi
          no_output_timeout: 5m
      - save_cache:
          key: uberjar-{{ checksum "./backend-checksums.txt" }}
          paths:
            - /home/circleci/metabase/metabase/target/uberjar/metabase.jar


########################################################################################################################
#                                                   DEPLOYMENT, ETC.                                                   #
########################################################################################################################

  deploy-master:
    executor: clojure
    steps:
      - attach-workspace
      - run: ./bin/deploy-webhook $DEPLOY_WEBHOOK


########################################################################################################################
#                                                      WORKFLOWS                                                       #
########################################################################################################################

workflows:
  version: 2
  build:
    jobs:
      - checkout

      - verify-i18n-files:
          requires:
            - checkout
            - fe-deps

      - be-deps:
          requires:
            - checkout

      - lein:
          name: be-tests
          requires:
            - be-deps
          lein-command: test

      - lein:
          name: be-tests-java-11
          requires:
            - be-deps
          e: java-11
          lein-command: test

      - deploy-master:
          requires:
            - build-uberjar
            - verify-i18n-files
            
          filters:
            branches:
              only: master
